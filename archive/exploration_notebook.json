{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Resource-Bounded Ultrafinitist Homotopy Type Theory\n",
    "## Interactive Exploration Notebook\n",
    "\n",
    "This notebook provides an interactive exploration of Resource-Bounded Ultrafinitist Homotopy Type Theory (RB-UF-HoTT) concepts using Python to interface with the Lean 4 implementation.\n",
    "\n",
    "### Key Concepts\n",
    "- **Resource Contexts**: Mathematical reasoning is bounded by available resources\n",
    "- **Feasible Numbers**: Only numbers constructible within resource bounds exist\n",
    "- **Volpin's Hesitation**: Certainty decreases as resource consumption approaches limits\n",
    "- **Resource Transfer**: Objects can move between contexts with more resources"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Setup and imports\n",
    "import sys\n",
    "sys.path.append('../tools')  # Add tools directory to path\n",
    "\n",
    "from python_lean_interface import (\n",
    "    create_interface, setup_notebook_environment, \n",
    "    quick_volpin_demo, ResourceContext\n",
    ")\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Setup notebook environment\n",
    "setup_notebook_environment()\n",
    "\n",
    "# Create interface to RB-UF-HoTT\n",
    "rb_interface = create_interface(\"..\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Check that Lean is available and the project builds\n",
    "if rb_interface.check_lean_availability():\n",
    "    print(\"✓ Lean 4 is available and RB-UF-HoTT project builds successfully\")\n",
    "    print(\"Ready to explore resource-bounded mathematics!\")\n",
    "else:\n",
    "    print(\"✗ Lean 4 is not available or project doesn't build\")\n",
    "    print(\"Please ensure Lean 4 is installed and run 'lake build' in the project root\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Resource Contexts: Different Mathematical Realities\n",
    "\n",
    "Different agents operate with different resource bounds, leading to genuinely different mathematics."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Visualize the different resource contexts\n",
    "rb_interface.visualize_resource_contexts()\n",
    "\n",
    "# Display the contexts in a table\n",
    "context_data = []\n",
    "for name, context in rb_interface.contexts.items():\n",
    "    context_data.append({\n",
    "        'Context': name,\n",
    "        'Time Bound': f\"{context.time_bound:,}\",\n",
    "        'Memory Bound': f\"{context.memory_bound:,}\",\n",
    "        'Proof Depth': context.proof_depth,\n",
    "        'Construction Steps': f\"{context.construction_steps:,}\",\n",
    "        'Collaboration Size': context.collaboration_size\n",
    "    })\n",
    "\n",
    "pd.DataFrame(context_data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Volpin's Hesitation: Formalizing the Famous Anecdote\n",
    "\n",
    "When asked about successive powers of 2, Volpin showed increasing hesitation. We can model this as approaching resource limits."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Demonstrate Volpin's hesitation across different contexts\n",
    "quick_volpin_demo(rb_interface)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Visualize Volpin's hesitation graphically\n",
    "contexts_to_compare = ['minimal', 'student', 'volpin', 'researcher']\n",
    "rb_interface.visualize_volpin_hesitation(contexts_to_compare, max_power=12)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Arithmetic Operations Under Resource Bounds\n",
    "\n",
    "Mathematical operations can succeed or fail depending on available resources."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Test arithmetic operations in different contexts\n",
    "operations = [\n",
    "    ('add', 5, 7),\n",
    "    ('add', 50, 75),\n",
    "    ('mult', 8, 9),\n",
    "    ('mult', 12, 15),\n",
    "    ('exp', 2, 5),\n",
    "    ('exp', 2, 10),\n",
    "    ('exp', 3, 4)\n",
    "]\n",
    "\n",
    "for context_name in ['minimal', 'student', 'researcher']:\n",
    "    print(f\"\\n{context_name.upper()} CONTEXT:\")\n",
    "    results = rb_interface.test_arithmetic(context_name, operations)\n",
    "    for op, result in results.items():\n",
    "        status = \"✓\" if result['success'] else \"✗\"\n",
    "        print(f\"  {status} {op}: {result['result']}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a heatmap of arithmetic operation success\n",
    "operations = ['add', 'mult', 'exp']\n",
    "numbers = [5, 10, 15, 20]\n",
    "contexts = ['minimal', 'student', 'researcher', 'computer']\n",
    "\n",
    "success_matrix = rb_interface.arithmetic_success_heatmap(operations, numbers, contexts)\n",
    "print(\"\\nSuccess Matrix (1 = succeeds, 0 = fails):\")\n",
    "print(success_matrix)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Educational Applications: Mathematics Across Learning Levels\n",
    "\n",
    "Different educational levels correspond to different resource contexts."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Visualize mathematical progression across educational levels\n",
    "rb_interface.educational_progression()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. Consistency Radii: When Contradictory Theories Become Consistent\n",
    "\n",
    "Theories that are classically inconsistent can be consistent under resource bounds."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Analyze consistency of theories with large number bounds\n",
    "large_numbers = [1000, 10**6, 10**9, 10**12, 2**(2**(2**2))]  # Including simplified Graham's number\n",
    "consistency_df = rb_interface.consistency_radius_analysis(large_numbers)\n",
    "\n",
    "print(\"\\nConsistency Analysis:\")\n",
    "print(\"1 = Theory is consistent in this resource context\")\n",
    "print(\"0 = Theory may be inconsistent (number is too small)\")\n",
    "print(consistency_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 6. Resource Transfer: Communication Between Different Mathematics\n",
    "\n",
    "Objects feasible in one context can transfer to contexts with more resources."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Compare how different contexts handle the same numbers\n",
    "test_numbers = [100, 1000, 10000, 100000]\n",
    "contexts_to_compare = ['minimal', 'student', 'researcher', 'computer']\n",
    "\n",
    "for number in test_numbers:\n",
    "    print(f\"\\nNumber: {number:,}\")\n",
    "    comparison_df = rb_interface.compare_contexts(contexts_to_compare, number)\n",
    "    \n",
    "    for _, row in comparison_df.iterrows():\n",
    "        status = \"✓ Can handle\" if row['Can Handle'] else \"✗ Cannot handle\"\n",
    "        print(f\"  {row['Context']}: {status}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 7. Custom Resource Contexts: Create Your Own Mathematical Reality\n",
    "\n",
    "Define your own resource context and explore its mathematical capabilities."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a custom resource context\n",
    "my_context = rb_interface.create_resource_context(\n",
    "    name='custom',\n",
    "    time_bound=5000,      # 5000 time units\n",
    "    memory_bound=300,     # 300 memory units\n",
    "    proof_depth=8,        # 8 levels of reasoning\n",
    "    construction_steps=800, # 800 construction steps\n",
    "    collaboration_size=2   # 2 agents can collaborate\n",
    ")\n",
    "\n",
    "print(f\"Created custom context: {my_context}\")\n",
    "\n",
    "# Test Volpin's hesitation in your custom context\n",
    "print(\"\\nVolpin's hesitation in custom context:\")\n",
    "custom_hesitation = rb_interface.volpin_hesitation('custom', 8)\n",
    "for n, certainty in custom_hesitation.items():\n",
    "    print(f\"  2^{n} = {2**n}: certainty = {certainty:.3f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 8. Interactive Exploration\n",
    "\n",
    "Try modifying the values below to explore different scenarios:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Interactive widgets for exploration (if ipywidgets is available)\n",
    "try:\n",
    "    from ipywidgets import interact, IntSlider\n",
    "    \n",
    "    def explore_hesitation(time_bound=1000, memory_bound=100, construction_steps=500):\n",
    "        \"\"\"Interactive function to explore how resource bounds affect Volpin's hesitation\"\"\"\n",
    "        \n",
    "        # Create temporary context\n",
    "        temp_context = rb_interface.create_resource_context(\n",
    "            'temp', time_bound, memory_bound, 5, construction_steps, 1\n",
    "        )\n",
    "        \n",
    "        # Calculate hesitation\n",
    "        hesitation = rb_interface.volpin_hesitation('temp', 10)\n",
    "        \n",
    "        # Plot results\n",
    "        powers = list(hesitation.keys())\n",
    "        certainties = list(hesitation.values())\n",
    "        \n",
    "        plt.figure(figsize=(10, 6))\n",
    "        plt.plot(powers, certainties, 'o-', linewidth=2, markersize=8)\n",
    "        plt.xlabel('Power of 2 (n)')\n",
    "        plt.ylabel('Certainty Level')\n",
    "        plt.title(f'Volpin\\'s Hesitation (T={time_bound}, M={memory_bound}, C={construction_steps})')\n",
    "        plt.grid(True, alpha=0.3)\n",
    "        plt.ylim(0, 1.1)\n",
    "        plt.show()\n",
    "        \n",
    "        print(\"Certainty levels:\")\n",
    "        for n, cert in hesitation.items():\n",
    "            print(f\"  2^{n} = {2**n}: {cert:.3f}\")\n",
    "    \n",
    "    # Create interactive widgets\n",
    "    interact(explore_hesitation,\n",
    "             time_bound=IntSlider(min=100, max=10000, step=100, value=1000),\n",
    "             memory_bound=IntSlider(min=10, max=1000, step=10, value=100),\n",
    "             construction_steps=IntSlider(min=50, max=5000, step=50, value=500))\n",
    "    \n",
    "except ImportError:\n",
    "    print(\"Install ipywidgets for interactive exploration: pip install ipywidgets\")\n",
    "    print(\"For now, modify the values manually in the cell above.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 9. Direct Lean Code Execution\n",
    "\n",
    "Execute Lean code directly from the notebook:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Execute custom Lean code\n",
    "lean_code = \"\"\"\n",
    "-- Define a custom resource context\n",
    "def my_context : ResourceContext := {\n",
    "  time_bound := 2000,\n",
    "  memory_bound := 200,\n",
    "  proof_depth := 6,\n",
    "  construction_steps := 1000,\n",
    "  collaboration_size := 1\n",
    "}\n",
    "\n",
    "-- Test if 256 is feasible in this context\n",
    "#eval construction_cost 256\n",
    "#eval (construction_cost 256 ≤ my_context.construction_steps)\n",
    "\n",
    "-- Calculate certainty about 2^8\n",
    "#eval volpin_hesitation my_context 8\n",
    "\"\"\"\n",
    "\n",
    "success, stdout, stderr = rb_interface.execute_lean(lean_code)\n",
    "\n",
    "if success:\n",
    "    print(\"Lean code executed successfully!\")\n",
    "    print(\"Output:\")\n",
    "    print(stdout)\n",
    "else:\n",
    "    print(\"Lean code failed to execute:\")\n",
    "    print(stderr)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 10. Summary and Key Insights\n",
    "\n",
    "Resource-Bounded Ultrafinitist Homotopy Type Theory provides:\n",
    "\n",
    "1. **Resource Relativity**: Mathematics is not universal but depends on available resources\n",
    "2. **Formalized Intuitions**: Volpin's philosophical insights become precise mathematical statements\n",
    "3. **Practical Applications**: Verified computation with absolute resource guarantees\n",
    "4. **Educational Framework**: Natural progression through different mathematical realities\n",
    "5. **Metamathematical Tools**: Analysis of consistency radii and resource scaling laws\n",
    "\n",
    "The key philosophical insight is that resource constraints are not limitations to overcome but are constitutive of mathematical meaning itself."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Cleanup\n",
    "rb_interface.cleanup()\n",
    "print(\"Session complete. Temporary files cleaned up.\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}